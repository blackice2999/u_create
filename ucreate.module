<?php
// $Id: ucreate.module,v 1.6 2010/09/01 18:52:12 alexb Exp $
/**
 * @file
 * U create - allows non site admins create and block users.
 */

/**
 * Implementation of hook_help().
 */
function ucreate_help($path, $arg) {
  switch ($path) {
    case 'user/add':
      return '<p>' . t('Create a new user. A notification e-mail will be sent to the e-mail address specified.') . '</p>';
  }
}

/**
 * Implementation of hook_menu().
 */
function ucreate_menu() {
  $items = array();
  $items['user/add'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ucreate_user_form'),
    'title' => 'Add user',
    'description' => 'Add a user to this web site.',
    'access arguments' => array('create users'),
    );

  $items['user/%user/block'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ucreate_block_form', 1, 'block'),
    'title' => 'Suspend',
    'description' => 'Suspend this user\'s account.',
    'access callback' => 'ucreate_access_suspend',
    'access arguments' => array('block users', 1, 'block'),
    'type' => MENU_LOCAL_TASK,
    );

  $items['user/%user/activate'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ucreate_block_form', 1, 'activate'),
    'title' => 'Activate',
    'description' => 'Activate this user\'s account.',
    'access callback' => 'ucreate_access_suspend',
    'access arguments' => array('block users', 1, 'activate'),
    'type' => MENU_LOCAL_TASK,
    );

  return $items;
}

function ucreate_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_admin_settings') {
    $form['email_ucreate'] = array(
      '#type' => 'fieldset',
      '#title' => t('U Create template'),
      '#collapsible' => TRUE,
      '#description' => t('Edit the e-mail message sent to users when a user is added using U Create. Available variables are: [user:name], [user:password], [user:welcome_message], [site:name], [site:login-url], [site:url-brief]'),
      '#group' => 'email',
    );
    $form['email_ucreate']['user_mail_ucreate_subject'] = array(
      '#type' => 'textfield',
      '#title' => t('Subject'),
      '#default_value' => welcome_subject(array(NULL)),
      '#maxlength' => 180,
    );
    $form['email_ucreate']['user_mail_ucreate_body'] = array(
      '#type' => 'textarea',
      '#title' => t('Body'),
      '#default_value' => welcome_body(array(NULL)),
      '#rows' => 15,
    );
  }
  return $form;
}

/**
 * Implementation of hook_permission().
 */
function ucreate_permission() {
  return array(
    'create users' => array(
      'title' => t('Create users'),
      'description' => t('Allows non-admin users to create other users'),
    ),
    'block users' => array(
      'title' => t('Block users'),
      'description' => t('Allows non-admin users to block other users'),
    )
  );
}

/**
 * Access menu callback for block/activate user tabs
 */
function ucreate_access_suspend($access_rule, $account, $op) {
  global $user;

  if (user_access($access_rule)) {

    if ($account->uid >= 1) {
    // Don't provide links if userid is 1 or 0

      if ($account->uid != $user->uid) {
      // User can not block themselves

        if (($op == 'activate' && $account->status == 0) || ($op == 'block' && $account->status == 1)) {
        // Only show if action is possible
          return TRUE;
        }
      }
    }
  }
  return FALSE;
}

/**
 * Break out form for creating users.
 */
function ucreate_user_form() {
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('User name'),
    '#required' => TRUE,
    '#element_validate' => array('ucreate_validate_name'),
    );
  $form['mail'] = array(
    '#type' => 'textfield',
    '#title' => t('E-mail'),
    '#required' => TRUE,
    '#element_validate' => array('ucreate_validate_mail'),
    );
  $form['mail_confirm'] = array(
    '#type' => 'textfield',
    '#title' => t('E-mail (confirm)'),
    '#required' => TRUE,
    );

  // The personal welcome message will be added to the top of the mail.
  // @todo: Ideal would be offering the full notification message for edit
  //        * updated by ajax call back (we shouldn't show tokens to users)
  //        * or in a second step of the form
  //        Both approaches have ramifications for the use of the form in ajaxy popups.
  $form['welcome_message_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Personal welcome message'),
    '#default_value' => '',
    '#description' => t('This welcome message will appear at the top of the e-mail notification sent to the new user.')
    );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add'),
    '#weight' => 20,
    );
  $form['#redirect'] = $_GET['q'];
  return $form;
}

/**
 * Element validator for usernames.
 */
function ucreate_validate_name($element, &$form_state) {
  if ($account = user_load_by_name(array('name' => $element['#value']))) {
    $name = user_access('access user profiles') ? l($account->name, 'user/' . $account->uid) : $account->name;
    form_set_error('name', t('User @name already exists.', array('@name' => $name)));
  }
  elseif ($error = user_validate_name($element['#value'])) {
    form_set_error('name', $error);
  }
}

/**
 * Element validator for mail.
 */
function ucreate_validate_mail($element, &$form_state) {
  if ($form_state['values']['mail_confirm'] !== $element['#value']) {
    form_set_error('mail_confirm', t('E-mail addresses don\'t match'));
  }
  elseif (user_load_by_mail(array('mail' => $element['#value']))) {
    form_set_error('mail', t('User with this e-mail address already exists.'));
  }
  elseif ($error = user_validate_mail($element['#value'])) {
    form_set_error('mail', $error);
  }
}

/**
 * Submit handler for ucreate_user_form().
 */
function ucreate_user_form_submit($form, &$form_state) {
  ucreate_user_create($form_state['values']);
}

/**
 * Block user confirm dialog.
 */
function ucreate_block_form($form, $user, $op) {
  if ($account = $user) {
    $path = $_GET['destination'] ?  $_GET['destination'] : '<front>';
    $form = array(
      'uid' => array(
        '#type' => 'value',
        '#value' => $user->uid,
      ),
      'operation' => array(
        '#type' => 'value',
        '#value' => $op,
      ),
    );
    if ($op == 'block') {
      $message = t('Are you sure you would like to suspend !user\'s account?', array('!user' => theme('username', $account)));
    }
    elseif ($op == 'activate') {
      $message = t('Are you sure you would like to activate !user\'s account?', array('!user' => theme('username', $account)));
    }
    $form = confirm_form($form, $message, $path, '');
    return $form;
  }
}

/**
 * Submit handler for ucreate_block_form().
 * @todo: send email if user is blocked/activated.
 */
function ucreate_block_form_submit($form, &$form_state) {
  if ($account = user_load($uid)) {
    if ($form_state['values']['operation'] == 'block') {
      $account = user_save($account, array('status' => 0));
      if ($account->status == 0) {
        drupal_set_message(t('The account !user was suspended.', array('!user' => theme('username', $account))));
        drupal_goto('user/' . $account->uid);
        return;
      }
    }
    elseif ($form_state['values']['operation'] == 'activate') {
      $account = user_save($account, array('status' => 1));
      if ($account->status == 1) {
        drupal_set_message(t('The account !user was activated.', array('!user' => theme('username', $account))));
        drupal_goto('user/' . $account->uid);
        return;
      }
    }
  }
  // Unlikely.
  drupal_set_message(t('There was an error in changing the account status.'), 'error');
}

/**
 * Create user
 *
 * @param array $edit
 *   Values in format accepted by user_save().
 *   Required values:
 *   $edit['name']
 *   $edit['mail']
 */
function ucreate_user_create($edit) {
  // Send in the language in which the user is viewing the site.
  global $language;
  // Sanitize the $params array which will get sent to drupal_mail.
  $params = array();
  // Define who the mail will be sent from.
  $from = variable_get('site_mail', ini_get('sendmail_from'));
  // Create account.
  $account = new stdClass();
  $password = user_password();
  $edit['pass'] = $password;
  $edit['status'] = 1;
  $account = user_save($account, $edit);
  $welcome_message = $edit['welcome_message_body'];

  // Notify user if successful.
  if ($account->uid) {
    drupal_set_message(t('You have created an account for @name. The username and password have been sent along with log in 
    instructions to the e-mail address !email.', array('@name' => $edit['name'], '!email' => l($edit['mail'], 'mailto:' . $edit['mail']))));
    
    $variables = array(
      '[user:name]' => $edit['name'],
      '[site:name]' => variable_get('site_name', 'Drupal'),
      '[site:login-url]' => user_pass_reset_url($account) . '/login',
      '[site:url-brief]' => trim(url('<front>', array('absolute' => TRUE)), '/'),
      '[user:password]' => $password,
      '[user:welcome_message]' => $welcome_message,
      );
    
    $params['subject'] = welcome_subject($variables);
    $params['body'] = welcome_body($variables);

    if (!drupal_mail('ucreate', 'ucreate-create', $edit['mail'], $language, $params, $from)) {
      drupal_set_message(t('Error sending notification mail to user.'), 'error');
    }
  }
  else {
    drupal_set_message(t('Error creating user.'), 'error');
  }
  return $account;
}

function welcome_body($variables) {
  $body = variable_get('user_mail_ucreate_body');
  if (empty($body)) {
  // @todo: Would love to use one time login link here - alas it is only valid for 24 hrs and needs to be renewed then.
  return t("[user:welcome_message]\n\nHello [user:name],\n\nWe have created an account for you on [site:name]\n[site:url-brief].\n\nYou can log in to the site with the following username and password\n\n[user:name]\n[user:password]\n\nPlease change your password after the first time you log in.\n\nWelcome to [site:name]", $variables);
  }
  else {
    return t($body, $variables);
  }
}

function welcome_subject($variables) {
  $subject = variable_get('user_mail_ucreate_subject');
  if (empty($subject)) {
    return t('Account details for [user:name] at [site:name]', $variables);
  }
  else {
    return t($subject, $variables);
  }
}

/**
 * Implementation of hook_mail().
 */
function ucreate_mail($key, &$message, $params) {
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['body'];
}
